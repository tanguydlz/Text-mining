port_dest<-data.frame(head(n=6,sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Deny", select=c(portdst))),decreasing = TRUE)))
colnames(port_dest)<-c("Port_Destination", "Fréquence")
data.frame(Index,port_dest)
Index<-c(1:6)
port_dest<-data.frame(head(n=6,sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Deny", select=c(portdst))),decreasing = TRUE)))
colnames(port_dest)<-c("Port_Destination", "Fréquence")
data.frame(Index,port_dest)
ex<-as.data.frame(port_dest)
row.names(ex)<-ex$Port_Destination
colnames(ex)<-c("Port_Destination", "ex349")
qplot(row.names(ex), ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) + theme_minimal()
ex
ex<-as.data.frame(port_dest)
row.names(ex)<-ex$Port_Destination
colnames(ex)<-c("Port_Destination", "ex349")
qplot(row.names(ex), ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) + theme_minimal()
ex349
ex$ex349
row.names(ex)
qplot(row.names(ex), ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" )
ex<-as.data.frame(port_dest)
row.names(ex)<-ex$Port_Destination
colnames(ex)<-c("Port_Destination", "ex349")
qplot(Index, ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) + theme_minimal()
lenght(portdest[,1])
length(portdest[,1])
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Permit" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(idsrc))),decreasing = TRUE))
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Permit" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipsrc))),decreasing = TRUE))
colnames(adress_ip)<-c("Adresse_IP", "Fréquence")
Index<-c(1:length(adress_ip[,1]))
data.frame(Index,adress_ip)
Index
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Permit" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipsrc))),decreasing = TRUE))
colnames(adress_ip)<-c("Adresse_IP", "Fréquence")
Index<-c(1:length(adress_ip[,1]))
data.frame(Index,adress_ip)
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Permit" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipdst))),decreasing = TRUE))
colnames(adress_ip)<-c("Adresse_IP", "Fréquence")
Index<-c(1:length(adress_ip[,1]))
data.frame(Index,adress_ip)
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Deny" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipsrc))),decreasing = TRUE))
colnames(adress_ip)<-c("Adresse_IP", "Fréquence")
adress_ip
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Deny" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipsrc))),decreasing = TRUE))
adress_ip
adress_ip3<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Deny" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipsrc))),decreasing = TRUE))
adress_ip3
adress_ip<-data.frame(sort(table(subset(src_fw,src_fw$proto=="TCP" & src_fw$action=="Permit" & ( src_fw$portdst == 21 | src_fw$portdst == 22 | src_fw$portdst == 23 | src_fw$portdst == 3306 | src_fw$portdst == 3389) , select=c(ipdst))),decreasing = TRUE))
colnames(adress_ip)<-c("Adresse_IP", "Fréquence")
Index<-c(1:length(adress_ip[,1]))
data.frame(Index,adress_ip)
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(Index, ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) + theme_minimal()
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(Index, ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349,x=Adresse_IP), vjust=1.6, colour="blue", size =3) + theme_minimal()
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(Index, ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Adresse IP Destination" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349,x=Adresse_IP), vjust=1.6, colour="blue", size =3) +
ggtitle("Graphique des adresses destination les plus frequentes sur les ports d'administration") +
theme_minimal()
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(Index, ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Adresse IP Destination" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) +
ggtitle("Graphique des adresses destination les plus frequentes sur les ports d'administration") +
theme_minimal()
ex
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(row.names(ex), ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Adresse IP Destination" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) +
ggtitle("Graphique des adresses destination les plus frequentes sur les ports d'administration") +
theme_minimal()
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(Adresse_IP, ex$ex349, data = ex, ylab = "Nbr de Hits", xlab = "Adresse IP Destination" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) +
ggtitle("Graphique des adresses destination les plus frequentes sur les ports d'administration") +
theme_minimal()
ex<-as.data.frame(adress_ip)
row.names(ex)<-ex$Adresse_IP
colnames(ex)<-c("Adresse_IP", "ex349")
qplot(Adresse_IP, ex349, data = ex, ylab = "Nbr de Hits", xlab = "Adresse IP Destination" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) +
ggtitle("Graphique des adresses destination les plus frequentes sur les ports d'administration") +
theme_minimal()
ex<-as.data.frame(port_dest)
row.names(ex)<-ex$Port_Destination
colnames(ex)<-c("Port_Destination", "ex349")
qplot(Port_Destination, ex349, data = ex, ylab = "Nbr de Hits", xlab = "Ports TCP" ) +
geom_bar(stat="identity", fill = "orange", colour="blue") +
geom_text(aes(label=ex349), vjust=1.6, colour="blue", size =3) + theme_minimal()
#Changement de type de la variable date
src_fw$date <-strptime(src_fw$date, "%Y-%m-%d %H:%M:%S")
stat_av_9<-subset(src_fw,src_fw$date$hour < 9 & src_fw$proto == "TCP" & src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
plot(table(stat_av_9$date$min),type="l", col ="red")
#table des données
stat_av_9<-subset(src_fw,src_fw$date$hour < 9 & src_fw$proto == "TCP" & src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
#Graphique
plot(table(stat_av_9$date$min),type="l", col ="red",main="Trafic avant 9h en TCP et acceptés par le firewall")
print(head(n=5,ex412[order(ex412$Freq,decreasing=TRUE),]))
stat_av_9_20<-subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20
& src_fw$proto == "TCP" & src_fw$action == "Deny")
print(head(n=5,stat_av_9_20[order(stat_av_9_20$Freq,decreasing=TRUE),]))
stat_av_9_20
stat_av_9_20<-data.frame(sort(table(subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20 & src_fw$proto == "TCP" & src_fw$action == "Deny")),decreasing = TRUE))
stat_av_9_20
stat_av_9_20<-data.frame(sort(table(subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20 & src_fw$proto == "TCP" & src_fw$action == "Deny"),select=c(ipdst)),decreasing = TRUE))
stat_av_9_20<-data.frame(sort(table(subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20 & src_fw$proto == "TCP" & src_fw$action == "Deny"),select=c(ipdst)),decreasing = TRUE))
stat_av_9_20<-data.frame(sort(table(subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20 & src_fw$proto == "TCP" & src_fw$action == "Deny",select=c(ipdst))),decreasing = TRUE))
print(head(n=5,stat_av_9_20[order(stat_av_9_20$Freq,decreasing=TRUE),]))
stat_av_9_20<-data.frame(sort(table(subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20 & src_fw$proto == "TCP" & src_fw$action == "Deny",select=c(ipdst))),decreasing = TRUE))
stat_av_9_20
stat_av_9_20<-data.frame(sort(table(subset(src_fw,src_fw$date$hour == 9 &src_fw$date$min <= 20 & src_fw$proto == "TCP" & src_fw$action == "Deny",select=c(ipdst))),decreasing = TRUE))
stat_av_9_20
plot(table(stat_av_9_20$date$min),type="S", col ="red")
table(src_fw$pronto)
table(src_fw$proto)
nb_deny<-subset(src_fw,src_fw$date$hour < 9 & src_fw$action == "Deny", select=c(ipsrc, ipdst, proto) )
table(nb_deny$proto)
plot(table(src_fw$date$min),type="l", col="blue", ylab = "Nbr de Hits")
deny<-subset(src_fw,src_fw$action == "Deny", select=c(ipsrc, ipdst, proto, date) )
permit<-subset(src_fw,src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
deny<-subset(src_fw,src_fw$action == "Deny", select=c(ipsrc, ipdst, proto, date) )
permit<-subset(src_fw,src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
plot(table(deny$date$min), table(permit$date$min),type="l", col="blue", ylab = "Nbr de Hits")
plot(c(table(deny$date$min), table(permit$date$min)),type="l", col="blue", ylab = "Nbr de Hits")
plot(rbind(table(deny$date$min), table(permit$date$min)),type="l", col="blue", ylab = "Nbr de Hits")
plot(cbind(table(deny$date$min), table(permit$date$min)),type="l", col="blue", ylab = "Nbr de Hits")
deny<-subset(src_fw,src_fw$action == "Deny", select=c(ipsrc, ipdst, proto, date) )
permit<-subset(src_fw,src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
plot(table(deny$date$min),type="l", col="blue", ylab = "Nbr de Hits")
lines(table(permit$date$min), type="l")
plot(table(deny$date$min),type="l", col="blue", ylab = "Nbr de Hits")
lines(table(permit$date$min), type="l", col="yellow")
table(deny$date$min)
table(permit$date$min)
table(deny$date$min)
deny<-subset(src_fw,src_fw$action == "Deny", select=c(ipsrc, ipdst, proto, date) )
permit<-subset(src_fw,src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
table(deny$date$min)
table(permit$date$min)
deny
permit<-subset(src_fw,src_fw$action == "Permit", select=c(ipsrc, ipdst, proto, date) )
permit
table(src_fw$date$min)
permit
table(permit$date$min)
table(deny$date$min)
deny
table(deny$date$min)
table(permit$date$min)
plot(table(deny$date$min),type="l", col="blue", ylab = "Nbr de Hits")
plot(table(deny$date$min),type="l", col="blue", ylab = "Nbr de Hits")
lines(table(permit$date$min), type="l", col="yellow")
plot(table(src_fw$date$min),type="l", col="blue", ylab = "Nbr de Hits")
deny
load("C:/Users/ameli/Desktop/R/Fouille_donnees/.RData")
ech = sort(sample(nrow(Xtrain), nrow(Xtrain)*.1))
Xtrain=Xtrain[ech,]
ytrain = ytrain[ech]
knitr::opts_chunk$set(echo = TRUE)
library(caret)
grid<-expand.grid(mtry=2:4, splitrule=c("gini","extratrees"), min.node.size=c(1,3,5))
fitControl<-trainControl(method = "cv", number=10, search="grid")
set.seed(42)
ranger_model_grid<-train(ytrain ~ ., data = Xtrain, method="ranger",num.trees=200, trControl=fitControl, tuneGrid= grid)
knitr::opts_chunk$set(echo = FALSE,message=FALSE, warning=FALSE)
#rf<- ranger(ytrain ~ ., data = Xtrain, importance = "impurity", mtry=2,num.tree=100)
load(file = "rf.Rdata")
rf$variable.importance
pred$predictions
#groupe selon la variable y
grp.y<-table(ytrain,pred$predictions)
pred = predict(rf, newdata = Xtest)
pred = cl_predict(rf, newdata = Xtest)
library(ranger)
pred = predict(rf, newdata = Xtest)
pred = predict(rf, newdata = as.character(Xtest))
pred = predict(rf, newdata = data.frame(Xtest))
pred = predict(rf, data = data.frame(Xtest))
#courbe ROC
roc.curve(ytest, pred$predictions)
#F mesure
cf <- confusionMatrix(pred$predictions, ytest, mode = "prec_recall", positive = '1')
print(cf)
setwd("~/")
setwd("/Users/hoangkhanhle/Desktop/School/Master 2/Text Mining/Projet")
#setwd("/Users/hoangkhanhle/Desktop/School/Master 2/Text Mining/Projet")
setwd("C:/Users/ameli/Desktop/R/TextMining/Text-mining")
setwd("C:/Users/ameli/Desktop/R/TextMining/Text-mining")
library(xlsx)
data<-read.xlsx2("Base_CEDA_nov_2020_anonymisee.xlsx", sheetIndex = 1,header = TRUE)
install.packages("tidytext")
install.packages("tidytext")
install.packages("C:/Users/ameli/Downloads/tidytext_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("hunspell")
library(tidyverse)
install.packages("tokenizers")
install.packages("tokenizers")
options(repos = c(CRAN = “http://cran.rstudio.com”))
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("tokenizers")
install.packages("tidytext")
library(tidytext)
library(xlsx)
data<-read.xlsx2("Base_CEDA_nov_2020_anonymisee.xlsx", sheetIndex = 1,header = TRUE)
library(tidytext)
tidytext <- data %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
VarDiag<-df$Diagnostic.[df$Diagnostic.!=""]
df<-read.xlsx2("Base_CEDA_nov_2020_anonymisee.xlsx", sheetIndex = 1,header = TRUE)
VarDiag<-df$Diagnostic.[df$Diagnostic.!=""]
tidytext <- data_frame(line = 1:nrow(VarDiag), text = VarDiag$text)
tidytext <- data.frame(line = 1:nrow(VarDiag), text = VarDiag$text)
nrow(VarDiag)
VarDiag
data.frame(VarDiag)
nrow(data.frame(VarDiag))
tidytext <- data.frame(line = 1:nrow(data.frame(VarDiag)), text = VarDiag$text)
tidytext <- data.frame(line = 1:nrow(data.frame(VarDiag)), text = VarDiag)
tidytext <- tidytext %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
tidytext %>%
unnest_tokens(word, text)
unnest_tokens(word, text)
r
library(dplyr)
text_df <- tibble(line = 1:4, text = VarDiag)
text_df <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext <- data.frame(line = 1:nrow(text_df), text = text_df)
tidytext <- tidytext %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
tidytext %>%
unnest_tokens(word, text)
text_df %>%
unnest_tokens(word, text)
text_df %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
#source
tidytext <- text_df %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
library(wordcloud)
wordcloud(tidytext$word,tidytext$n,max.words=20,color=c("lightblue3","lightblue4","darkcyan"))
VarDiag<-new_df$Diagnostic.[new_df$Diagnostic.!=""]
View(new_df)
VarDiag<-new_df$df.Diagnostic.[new_df$df.Diagnostic.!=""]
length(VarDiag)
library(tidytext)
library(dplyr)
text_df <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext <- text_df %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
tidytext <- text_df %>%
unnest_tokens(word, text, token = "ngrams", n = 2) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
#source
tidytext <- text_df %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
text_df
tidytext <- text_df %>%
unnest_tokens(word, text)
tidytext
library(dplyr)
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
#source
tidytext <- tidytext %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
library(wordcloud)
wordcloud(tidytext$word,tidytext$n,max.words=20,color=c("lightblue3","lightblue4","darkcyan"))
tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2)
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2)
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
#source
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2)
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
anti_join(stop_words) %>%
count(ngram, sort = TRUE)
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
anti_join(stop_words)
n=2
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = n) %>%
if (n==1) {anti_join(stop_words)} %>%
count(ngram, sort = TRUE)
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
#source
n=2
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = n) %>%
if (n==1) {anti_join(stop_words)  %>% }
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
#source
n=2
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = n)
if (n==1) {tidytext <- tidytext %>% anti_join(stop_words)}
tidytext <- tidytext %>% count(ngram, sort = TRUE)
wordcloud(tidytext$ngram,tidytext$line,max.words=20,color=c("lightblue3","lightblue4","darkcyan"))
tidytext
wordcloud(tidytext$ngram,tidytext$n,max.words=20,color=c("lightblue3","lightblue4","darkcyan"))
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = n)
tidytext %>%
separate(word, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
unite(word,word1, word2, sep = " ") %>%
count(word, sort = TRUE)
is.na(2)
is.na(NA)
tidytext %>%
filter(!is.na(ngram))
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = n)  %>%
filter(!is.na(ngram))
tidytext <- tibble(line = 1:length(VarDiag), text = VarDiag)
tidytext <- tidytext %>%
unnest_tokens(ngram, text, token = "ngrams", n = n)  %>%
filter(!is.na(ngram))
tidytext <- tidytext %>% count(ngram, sort = TRUE)
wordcloud(tidytext$ngram,tidytext$n,max.words=20,color=c("lightblue3","lightblue4","darkcyan"))
BigramTokenizer =function(x){
unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
}
shiny::runApp('Projet_TM')
runApp()
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp()
runApp('Projet_TM')
runApp('Projet_TM')
X=new_df[,1:2]
#, "diagnostique", "jeux.et.activité"
colnames(X) = c("preoccupations","motif")
text_df <- tibble(line = 1:nrow(X), preoccupation = X[,1], motif=X[,2])
tidytext = text_df %>% unnest_tokens(word, as.numeric(input$selectVar))
tidytext = tidytext[,-2]
test_clean_df <- tidytext %>% filter(!word %in% c(stopwords('french'),'a','très','d\'un','qu\'il','nc','avoir','afin'))
#Fréquence des mots
freq=test_clean_df %>%
count(word,sort=T)
tidytext = text_df %>% unnest_tokens(word, as.numeric(input$selectVar))
tidytext = text_df %>% unnest_tokens(word, as.numeric(2))
tidytext
tidytext = text_df %>% unnest_tokens(word, as.numeric(3))
tidytext
tidytext[,-2]
tidytext = text_df %>% unnest_tokens(word, as.numeric(3))
tidytext[,-2]
head(new_df)
X=new_df[,1:4]
colnames(X) = c("preoccupations","motif", "diagnostique", "jeux")
text_df <- tibble(line = 1:nrow(X), preoccupation = X[,1], motif=X[,2],diagnostique=X[,3], jeux=X[,4])
tidytext = text_df %>% unnest_tokens(word, as.numeric(2)
tidytext = tidytext[,-2]
test_clean_df <- tidytext %>% filter(!word %in% c(stopwords('french'),'a','très','d\'un','qu\'il','nc','avoir','afin'))
#Fréquence des mots
freq=test_clean_df %>%
count(word,sort=T)
})
tidytext = text_df %>% unnest_tokens(word, as.numeric(2))
tidytext = tidytext[,-2]
test_clean_df <- tidytext %>% filter(!word %in% c(stopwords('french'),'a','très','d\'un','qu\'il','nc','avoir','afin'))
freq=test_clean_df %>%
count(word,sort=T)
freq
tidytext = text_df %>% unnest_tokens(word, as.numeric(2))
test_clean_df <- tidytext %>% filter(!word %in% c(stopwords('french'),'a','très','d\'un','qu\'il','nc','avoir','afin'))
freq=test_clean_df %>%
count(word,sort=T)
freq
runApp('Projet_TM')
colnames(new_df)
runApp('Projet_TM')
runApp('Projet_TM')
X=new_df[,1:9]
colnames(X) = c("preoccupations","motif", "diagnostique", "jeux","sommeil","contact","habitute","qui","antecedents")
text_df <- tibble(line = 1:nrow(X), preoccupation = X[,1], motif=X[,2],diagnostique=X[,3], jeux=X[,4], sommeil=X[,5],contact=X[,6],habitute=X[,7],qui=X[,8],antecedents=X[,9])
X$diagnostique
X2=X[X$diagnostique!="Pas de TSA" & X$diagnostique!="",]
X=new_df[,1:9]
X2=X[X$diagnostique!="Pas de TSA" & X$diagnostique!="pas de TSA" & X$diagnostique!="",]
X$diagnostique
new_df<-data.frame(df$Préoccupations,df$Motif.de.consult,df$Diagnostic.,df$jeux.et.activités,df$Sommeil,df$Entrée.en.contact,df$Habitudes.de.l.enfant,df$Qui,df$Antécédents,df$X1eres.inquiétudes..mois.)
X=new_df[,1:9]
X2=X[X$diagnostique!="Pas de TSA" & X$diagnostique!="pas de TSA" & X$diagnostique!="",]
colnames(X) = c("preoccupations","motif", "diagnostique", "jeux","sommeil","contact","habitute","qui","antecedents")
X2=X[X$diagnostique!="Pas de TSA" & X$diagnostique!="pas de TSA" & X$diagnostique!="",]
X2$diagnostique
X2=X[X$diagnostique!="Pas de TSA%*" & X$diagnostique!="pas de TSA" & X$diagnostique!="",]
X2$diagnostique
X2=X[str_detect(X$diagnostique, "pas de TSA") & X$diagnostique!="pPas de TSA" & X$diagnostique!="",]
library(stringr)
X2=X[str_detect(X$diagnostique, "pas de TSA") & X$diagnostique!="pPas de TSA" & X$diagnostique!="",]
X2$diagnostique
X2=X[!str_detect(X$diagnostique, "pas de TSA") & X$diagnostique!="pPas de TSA" & X$diagnostique!="",]
X2$diagnostique
X2=X[!str_detect(X$diagnostique, "pas de TSA") & !str_detect(X$diagnostique, "Pas de TSA") & X$diagnostique!="",]
X2$diagnostique
colnames(df)
shiny::runApp('Inquietude')
shiny::runApp('Inquietude')
runApp('Projet_TM')
runApp('Inquietude')
runApp('Inquietude')
runApp('Inquietude')
runApp('Inquietude')
runApp('Projet_TM')
runApp('Inquietude')
runApp('Projet_TM')
library(stringr)
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
shiny::runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
shiny::runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
runApp('Projet_TM')
exists(header)
header=0
runApp('Projet_TM')
runApp('Projet_TM')
